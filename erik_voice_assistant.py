import os
import logging
import asyncio
from flask import Flask, request
from telegram import Update, Bot
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters
)
import openai
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ .env (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, Render –º–æ–∂–µ—Ç –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ ‚Äî –Ω—É–∂–Ω–æ)
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN") or "–í–°–¢–ê–í–¨_–°–Æ–î–ê_–°–í–û–ô_–¢–û–ö–ï–ù_–ï–°–õ–ò_–ù–£–ñ–ù–û"
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY") or "sk-..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞
print("‚úÖ TELEGRAM_TOKEN:", TELEGRAM_TOKEN)
print("‚úÖ OPENAI_API_KEY:", OPENAI_API_KEY)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# Flask
app = Flask(__name__)
bot = Bot(token=TELEGRAM_TOKEN)

# Telegram application
application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
openai.api_key = OPENAI_API_KEY

# GPT –æ—Ç–≤–µ—Ç
async def chatgpt_response(text):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": text}]
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logging.error(f"OpenAI error: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ ChatGPT."

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ï—Ä–∏–∫ ‚Äî —Ç–≤–æ–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text
    print("üì• –°–æ–æ–±—â–µ–Ω–∏–µ:", user_input)
    reply = await chatgpt_response(user_input)
    print("üì§ –û—Ç–≤–µ—Ç:", reply)
    await update.message.reply_text(reply)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# –Ø–≤–Ω–æ –ø—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º URL Webhook ‚Äî Telegram –±—É–¥–µ—Ç —Å—Ç—É—á–∞—Ç—å—Å—è —Å—é–¥–∞!
@app.route(f"/{TELEGRAM_TOKEN}", methods=["POST"])
def webhook():
    try:
        update = Update.de_json(request.get_json(force=True), bot)
        application.update_queue.put_nowait(update)
        return "ok"
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ webhook:", e)
        return "error", 400

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞
async def run_bot():
    await application.initialize()
    await application.start()
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (—á–µ—Ä–µ–∑ webhook)")

# –ó–∞–ø—É—Å–∫ Flask –∏ Telegram
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(run_bot())
    app.run(host="0.0.0.0", port=10000)
