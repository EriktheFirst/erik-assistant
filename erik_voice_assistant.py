import os
import logging
import asyncio

from flask import Flask, request
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# üîπ –°–æ–∑–¥–∞–Ω–∏–µ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)

# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (Render)
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")

# üîπ –°–æ–∑–¥–∞–Ω–∏–µ telegram-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()


# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –∂–∏–≤!")

application.add_handler(CommandHandler("start", start))


# üîπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
@app.before_serving
async def init_bot():
    await application.initialize()
    await application.start()
    webhook_url = f"https://{os.environ.get('RENDER_EXTERNAL_HOSTNAME')}/{TELEGRAM_TOKEN}"
    await application.bot.set_webhook(webhook_url)
    logging.info(f"üì° Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")


# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö webhook-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram
@app.post(f"/{TELEGRAM_TOKEN}")
async def webhook_handler():
    try:
        update = Update.de_json(request.json, application.bot)
        await application.process_update(update)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ webhook: {e}")
        return "error", 400
    return "ok", 200


# üîπ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    import os

    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)
